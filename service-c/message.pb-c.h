/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: message.proto */

#ifndef PROTOBUF_C_message_2eproto__INCLUDED
#define PROTOBUF_C_message_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _HeroMsg HeroMsg;
typedef struct _HeartBeat HeartBeat;
typedef struct _LoginReq LoginReq;
typedef struct _ConnectReq ConnectReq;
typedef struct _LoginRsp LoginRsp;
typedef struct _ConnectRsp ConnectRsp;
typedef struct _EnemyMsg EnemyMsg;
typedef struct _NewEnemy NewEnemy;
typedef struct _GameStart GameStart;


/* --- enums --- */


/* --- messages --- */

struct  _HeroMsg
{
  ProtobufCMessage base;
  int32_t uid;
  int32_t point_x;
  int32_t point_y;
};
#define HERO_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hero_msg__descriptor) \
    , 0, 0, 0 }


struct  _HeartBeat
{
  ProtobufCMessage base;
};
#define HEART_BEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&heart_beat__descriptor) \
     }


struct  _LoginReq
{
  ProtobufCMessage base;
  char *name;
};
#define LOGIN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login_req__descriptor) \
    , NULL }


struct  _ConnectReq
{
  ProtobufCMessage base;
};
#define CONNECT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&connect_req__descriptor) \
     }


struct  _LoginRsp
{
  ProtobufCMessage base;
  protobuf_c_boolean success;
  int32_t point_x;
  int32_t point_y;
  int32_t enemy_num;
  int32_t uid;
};
#define LOGIN_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login_rsp__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _ConnectRsp
{
  ProtobufCMessage base;
  protobuf_c_boolean success;
};
#define CONNECT_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&connect_rsp__descriptor) \
    , 0 }


struct  _EnemyMsg
{
  ProtobufCMessage base;
  int32_t uid;
  int32_t point_x;
  int32_t point_y;
};
#define ENEMY_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&enemy_msg__descriptor) \
    , 0, 0, 0 }


struct  _NewEnemy
{
  ProtobufCMessage base;
  int32_t uid;
  int32_t point_x;
  int32_t point_y;
};
#define NEW_ENEMY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&new_enemy__descriptor) \
    , 0, 0, 0 }


struct  _GameStart
{
  ProtobufCMessage base;
};
#define GAME_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&game_start__descriptor) \
     }


/* HeroMsg methods */
void   hero_msg__init
                     (HeroMsg         *message);
size_t hero_msg__get_packed_size
                     (const HeroMsg   *message);
size_t hero_msg__pack
                     (const HeroMsg   *message,
                      uint8_t             *out);
size_t hero_msg__pack_to_buffer
                     (const HeroMsg   *message,
                      ProtobufCBuffer     *buffer);
HeroMsg *
       hero_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hero_msg__free_unpacked
                     (HeroMsg *message,
                      ProtobufCAllocator *allocator);
/* HeartBeat methods */
void   heart_beat__init
                     (HeartBeat         *message);
size_t heart_beat__get_packed_size
                     (const HeartBeat   *message);
size_t heart_beat__pack
                     (const HeartBeat   *message,
                      uint8_t             *out);
size_t heart_beat__pack_to_buffer
                     (const HeartBeat   *message,
                      ProtobufCBuffer     *buffer);
HeartBeat *
       heart_beat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   heart_beat__free_unpacked
                     (HeartBeat *message,
                      ProtobufCAllocator *allocator);
/* LoginReq methods */
void   login_req__init
                     (LoginReq         *message);
size_t login_req__get_packed_size
                     (const LoginReq   *message);
size_t login_req__pack
                     (const LoginReq   *message,
                      uint8_t             *out);
size_t login_req__pack_to_buffer
                     (const LoginReq   *message,
                      ProtobufCBuffer     *buffer);
LoginReq *
       login_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login_req__free_unpacked
                     (LoginReq *message,
                      ProtobufCAllocator *allocator);
/* ConnectReq methods */
void   connect_req__init
                     (ConnectReq         *message);
size_t connect_req__get_packed_size
                     (const ConnectReq   *message);
size_t connect_req__pack
                     (const ConnectReq   *message,
                      uint8_t             *out);
size_t connect_req__pack_to_buffer
                     (const ConnectReq   *message,
                      ProtobufCBuffer     *buffer);
ConnectReq *
       connect_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   connect_req__free_unpacked
                     (ConnectReq *message,
                      ProtobufCAllocator *allocator);
/* LoginRsp methods */
void   login_rsp__init
                     (LoginRsp         *message);
size_t login_rsp__get_packed_size
                     (const LoginRsp   *message);
size_t login_rsp__pack
                     (const LoginRsp   *message,
                      uint8_t             *out);
size_t login_rsp__pack_to_buffer
                     (const LoginRsp   *message,
                      ProtobufCBuffer     *buffer);
LoginRsp *
       login_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login_rsp__free_unpacked
                     (LoginRsp *message,
                      ProtobufCAllocator *allocator);
/* ConnectRsp methods */
void   connect_rsp__init
                     (ConnectRsp         *message);
size_t connect_rsp__get_packed_size
                     (const ConnectRsp   *message);
size_t connect_rsp__pack
                     (const ConnectRsp   *message,
                      uint8_t             *out);
size_t connect_rsp__pack_to_buffer
                     (const ConnectRsp   *message,
                      ProtobufCBuffer     *buffer);
ConnectRsp *
       connect_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   connect_rsp__free_unpacked
                     (ConnectRsp *message,
                      ProtobufCAllocator *allocator);
/* EnemyMsg methods */
void   enemy_msg__init
                     (EnemyMsg         *message);
size_t enemy_msg__get_packed_size
                     (const EnemyMsg   *message);
size_t enemy_msg__pack
                     (const EnemyMsg   *message,
                      uint8_t             *out);
size_t enemy_msg__pack_to_buffer
                     (const EnemyMsg   *message,
                      ProtobufCBuffer     *buffer);
EnemyMsg *
       enemy_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   enemy_msg__free_unpacked
                     (EnemyMsg *message,
                      ProtobufCAllocator *allocator);
/* NewEnemy methods */
void   new_enemy__init
                     (NewEnemy         *message);
size_t new_enemy__get_packed_size
                     (const NewEnemy   *message);
size_t new_enemy__pack
                     (const NewEnemy   *message,
                      uint8_t             *out);
size_t new_enemy__pack_to_buffer
                     (const NewEnemy   *message,
                      ProtobufCBuffer     *buffer);
NewEnemy *
       new_enemy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   new_enemy__free_unpacked
                     (NewEnemy *message,
                      ProtobufCAllocator *allocator);
/* GameStart methods */
void   game_start__init
                     (GameStart         *message);
size_t game_start__get_packed_size
                     (const GameStart   *message);
size_t game_start__pack
                     (const GameStart   *message,
                      uint8_t             *out);
size_t game_start__pack_to_buffer
                     (const GameStart   *message,
                      ProtobufCBuffer     *buffer);
GameStart *
       game_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   game_start__free_unpacked
                     (GameStart *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*HeroMsg_Closure)
                 (const HeroMsg *message,
                  void *closure_data);
typedef void (*HeartBeat_Closure)
                 (const HeartBeat *message,
                  void *closure_data);
typedef void (*LoginReq_Closure)
                 (const LoginReq *message,
                  void *closure_data);
typedef void (*ConnectReq_Closure)
                 (const ConnectReq *message,
                  void *closure_data);
typedef void (*LoginRsp_Closure)
                 (const LoginRsp *message,
                  void *closure_data);
typedef void (*ConnectRsp_Closure)
                 (const ConnectRsp *message,
                  void *closure_data);
typedef void (*EnemyMsg_Closure)
                 (const EnemyMsg *message,
                  void *closure_data);
typedef void (*NewEnemy_Closure)
                 (const NewEnemy *message,
                  void *closure_data);
typedef void (*GameStart_Closure)
                 (const GameStart *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor hero_msg__descriptor;
extern const ProtobufCMessageDescriptor heart_beat__descriptor;
extern const ProtobufCMessageDescriptor login_req__descriptor;
extern const ProtobufCMessageDescriptor connect_req__descriptor;
extern const ProtobufCMessageDescriptor login_rsp__descriptor;
extern const ProtobufCMessageDescriptor connect_rsp__descriptor;
extern const ProtobufCMessageDescriptor enemy_msg__descriptor;
extern const ProtobufCMessageDescriptor new_enemy__descriptor;
extern const ProtobufCMessageDescriptor game_start__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_message_2eproto__INCLUDED */
